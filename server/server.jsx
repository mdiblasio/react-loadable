import express from 'express';
import React from "react";
import path from 'path';
import ReactDOMServer from "react-dom/server";
import App from './../src/components/App.jsx';
import fs from 'fs';
import { ChunkExtractor } from '@loadable/server';

const app = express();
const log = console.log;

__dirname = process.cwd() + '/dist/web/';

log(`__dirname = ${__dirname}`);

app.get(/.*\.html$/, (req, res) => {
  // This is the stats file generated by webpack loadable plugin
  const statsFile = path.resolve(__dirname + 'loadable-stats.json')
  // We create an extractor from the statsFile
  const extractor = new ChunkExtractor({ statsFile })
  // Wrap your application using "collectChunks"
  const jsx = extractor.collectChunks(<App />)
  // Render your application
  const html = ReactDOMServer.renderToString(jsx)
  // You can now collect your script tags
  const scriptTags = extractor.getScriptTags() // or extractor.getScriptElements();
  // You can also collect your "preload/prefetch" links
  const linkTags = extractor.getLinkTags() // or extractor.getLinkElements();
  // And you can even collect your style tags (if you use "mini-css-extract-plugin")
  const styleTags = extractor.getStyleTags() // or extractor.getStyleElements();

  res.set('content-type', 'text/html')
  res.send(`

      <!DOCTYPE html>
      <html>

      <head>
        <meta charset="utf-8">
        <meta name="viewport"
              content="width=device-width, initial-scale=1, maximum-scale=1">
        <title>React Loadable</title>
        ${extractor.getLinkTags()}
        ${extractor.getStyleTags()}
        <style>
        body {
          margin: 0px;
          padding: 20px;
        }

        @keyframes spin {
          0% {
            transform: rotate(0deg);
          }
          100% {
            transform: rotate(360deg);
          }
        }
        </style>
      </head>

      <body>
        <div id="react-root">${html}</div>
        ${extractor.getScriptTags()}
      </body>

      </html>
    `)
}, );

app.use(express.static(__dirname));


// listen for requests :)
process.env.PORT = process.env.PORT || 8080;
const listener = app.listen(process.env.PORT, function() {
  console.log('Your app is listening on port ' + listener.address().port);
});